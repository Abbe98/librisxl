/**
 * Runtime tools. Use these tasks to invoke compiled tools directly from gradle.
 */
import org.gradle.api.plugins.jetty.JettyRun

/*
task importData(dependsOn: 'classes', type: JavaExec) {
  description "Run ImportWhelk. USAGE: -Dargs='<bib|auth> [resource] [mode(<default|riak>)] ([since])' -Delastic.host='<host>' (-Delastic.cluster='<cluster>')"
  classpath = sourceSets.main.runtimeClasspath
  main = 'se.kb.libris.whelks.ImportWhelk'
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', "")
  systemProperty 'file.encoding', System.getProperty('file.encoding', "")
  args(System.getProperty('args', "").split() as String[])
  maxHeapSize = '1024m'
}

task reindexData(dependsOn: 'classes', type: JavaExec) {
  description "Run ReindexingWhelk. (USAGE: -Dargs='<bib|auth> [resource] [since]') -Delastic.host='<host>' (-Delastic.cluster='<cluster>')"
  classpath = sourceSets.main.runtimeClasspath
  main = 'se.kb.libris.whelks.ReindexingWhelk'
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', "")
  args(System.getProperty('args', "").split() as String[])
}
*/

task whelkOperation(dependsOn: 'classes', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<import|reindex> <whelkname> <config-url> [resource (for import)] [since (for import)] [maxNoOfDocs (for import)]' -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  main = 'se.kb.libris.whelks.WhelkOperator'
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', "")
  systemProperty 'file.encoding', System.getProperty('file.encoding', "")
  args(System.getProperty('args', "").split() as String[])
}

task(groovy, dependsOn: 'classes', type: JavaExec) {
  description "Run a Groovy Script (USAGE: -Dargs='<script> [...]')"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.GroovyMain'
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.conch.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

jettyRun.contextPath = '/'
jettyRun.description = "Starts a jetty instance. (USAGE: -Delastic.host='<host>' -Delastic.cluster='[cluster]')\nTo use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:src/main/resources/whelks.json')"

task(jettyLocal, dependsOn: 'classes', type: JettyRun) {
    description "Starts a local whelk with default settings."
    System.setProperty('whelk.config.uri', "file:src/main/resources/mock_whelks.json")
    System.setProperty('elastic.cluster', "bundled_whelk_index")
    System.setProperty('file.encoding', System.getProperty('file.encoding', ""))
}
