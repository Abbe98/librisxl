import org.gradle.api.plugins.jetty.JettyRun

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    flatDir name: 'localWhelk-webapiDir', dirs: '../lib'
}

task devLogging(dependsOn: 'classes', type: Copy) {
    copy {
        from('../etc')
        include('logback_dev.xml')
        rename('logback_dev.xml','logback.xml')
        into "build/resources/main"
    }
}

task jettyRun(dependsOn: 'devLogging', type: JettyRun, overwrite: true) {
    //jettyRun.contextPath = '/'
    jettyRun.httpPort = 8180
    jettyRun.description = "Starts a jetty instance. (USAGE: -Delastic.host='<host>' -Delastic.cluster='[cluster]')\nTo use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:etc/whelks.json')"

    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
    System.setProperty('cassandra.host', System.getProperty('cassandra.host', "localhost"))
    System.setProperty('cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster))
    System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
    System.setProperty('elastic.host', System.getProperty("elastic.host", ""))
}

task whelkOperation(dependsOn: 'classes', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<call without for usage instructions>' -Dwhelk.config.uri=<config-url> -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = ".."
  main = 'se.kb.libris.whelks.WhelkOperator'
  minHeapSize = "2g"
  maxHeapSize = "2g"
  def mock_es_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
  def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', mock_es_cluster)
  systemProperty 'cassandra.host', System.getProperty('cassandra.host', "localhost")
  systemProperty 'cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster)
  systemProperty 'file.encoding', "UTF-8"
  systemProperty 'whelk.config.uri', System.getProperty('whelk.config.uri', null)
  systemProperty 'plugin.config.uri', System.getProperty('plugin.config.uri', null)
  systemProperty 'disable.plugins', System.getProperty('disable.plugins', 'indexingprawn')
  systemProperty 'picky', System.getProperty('picky', 'false')
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}
