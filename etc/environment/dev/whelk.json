{
    "_properties": {
        "WHELK_WORK_DIR": "work",
        "STORAGE_PATH": "work/storage",
        "ELASTIC_SEARCH_HOST": "localhost",
        "ELASTIC_STORAGE_HOST": "localhost",
        "ELASTIC_PORT": 9300,
        "AVAILABLE_TYPES": ["auth","bib","hold","def","sys"],
        "GRAPHSTORE_DATA_URI": "http://localhost:3030/libris/data",
        "GRAPHSTORE_QUERY_URI": "http://localhost:3030/libris/query",
        "GRAPHSTORE_UPDATE_URI": "http://localhost:8890/sparql-graph-crud",
        "GRAPHSTORE_UPDATE_URI": "http://localhost:3030/libris/update",
        "GRAPHSTORE_UPDATE_AUTHENTICATION_REQUIRED": false,
        "ACTIVEMQ_BROKER_URL": "tcp://localhost:61616",
        "MQ_INDEX": "activemq:devlibris.index",
        "MQ_BULK_INDEX": "activemq:devlibris.bulk.index?concurrentConsumers=5",
        "MQ_GRAPHSTORE": "activemq:devlibris.graphstore",
        "MQ_APIX": "activemq:localapix",
        "APIX_HOST": "http://localhost:8001",
        "CAMEL_MASTER_COMPONENT":"activemq",
        "CAMEL_CHANNEL_PREFIX":"local",
        "CAMEL_COMPONENT_CONFIG":"concurrentConsumers=10"

    },
    "_id": "libris",
    "_docBaseUri" : "http://libris.kb.se/",
    "_docMetaMapping" : {
        "hold": [
            "about.heldBy.notation"
        ]
    },
    "_plugins": {
        "_support": [
            "elasticnode",
            "fusekiserver",
            "activemqbroker"
            ],
        "_camel": [
            "indexroutebuilder",
            "graphstoreroutebuilder",
            "apixroutebuilder"
            ],
        "_components": [
            "jsonldstorage",
            "graphstore",
            "index"
        ]
    },
    "_apis": [
        { "/_remotesearch": "remotesearch" },
        { "/_operations": "operator" },
        { "/_format": "formatter" },
        { "/_sparql": "sparqlapi" },
        { "/_sys/metasearch":  "metasearchapi" },
        { "/_libcount": "libcount" },
        { "/_isxntool":  "isxntool" },
        { "/_complete/([\\w/]+)$":  "completeexpander" },
        { "/([\\w/]+)/_oaipmhsearch": "oaipmhsearch"},
        { "/([\\w/]+)/_search":  "search" },
        { "^/([^_].*)$":  "documentapi" },
        { "^/$":  "documentapi" }
    ]
}
