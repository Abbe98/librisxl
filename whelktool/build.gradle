apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'


def loadConfiguration() {
    ext {
        try {
            environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
    System.setProperty 'whelk.environment', environment
}

loadConfiguration()

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

mainClassName = "whelk.datatool.WhelkTool"

test.testLogging {
    showStandardStreams = true
    exceptionFormat = "full"
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
}

configurations.all {
    resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
    }
}

dependencies {
    implementation project(':whelk-core')
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    implementation 'com.google.guava:guava:18.0'
    implementation 'org.codehaus.groovy:groovy-cli-commons:3.0.9'
    implementation 'org.codehaus.groovy:groovy-jsr223:3.0.9'
    implementation 'org.codehaus.groovy:groovy:3.0.9'
    implementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    implementation group: 'xml-apis', name: 'xml-apis', version: '1.4.01'
}

jar {
    manifest {
        attributes "Main-Class": "whelk.datatool.WhelkTool"
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : project.zipTree(it).matching {
            }
        }
    }
}

task(doRun, dependsOn: "classes", type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "whelk.datatool.WhelkTool"
    minHeapSize = "1g"
    maxHeapSize = "4g"
    systemProperties(
        'xl.secret.properties': System.getProperty("xl.secret.properties")
    )
    args(System.getProperty("args", "").split() as String[])
}
