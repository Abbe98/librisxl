import org.gradle.api.plugins.jetty.JettyRun
apply plugin: 'groovy'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'java'


loadConfiguration()

def loadConfiguration() {
    ext {
        try {
           environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
    System.setProperty 'whelk.environment', environment
}


def versionprops = new Properties()
try {
    file("src/main/resources/version.properties").withInputStream { stream ->
        versionprops.load(stream)
    }
} catch (Exception e) {}

// Version is set on deploy, but to maintain semblance of control, update default value appropriately when releasing.
def versionNumber = versionprops.get("releaseTag", "0.9.0.x")

archivesBaseName = "oaipmhharvester"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir 'src/main/' }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "http://jitpack.io/" }

}

configurations {
    executableWarDeps
}

buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
  }
  dependencies {
    classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    classpath 'junit:junit:3.8.2'
  }
}

dependencies {

    def groovyVersion=GroovySystem.getVersion()
    def jettyVersion="8.1.16.v20140903"

    if ('useLocalDeps' in System.properties.keySet()) {
        compile project(':../../whelk-core')
    } else {
        compile 'com.github.libris:whelk-core:302dca1b25f4c7903279e9ba584c694753151589'
    }

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'org.slf4j:log4j-over-slf4j:1.7.6'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    compile 'org.picocontainer:picocontainer:2.15'
    /* Not needed?
    compile 'com.thoughtworks.paranamer:paranamer:2.7'
    compile 'asm:asm:3.3.1'
    */
    // Standalone
    compile "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    compile "org.eclipse.jetty:jetty-server:${jettyVersion}"
    // Servlet dependencies
    compile 'com.thetransactioncompany:cors-filter:2.1.2'
    providedCompile 'javax.servlet:servlet-api:2.5'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    // Standalone
    executableWarDeps "org.eclipse.jetty:jetty-server:${jettyVersion}"
    executableWarDeps "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
    executableWarDeps "org.codehaus.groovy:groovy-all:${groovyVersion}"
    executableWarDeps 'commons-cli:commons-cli:1.2'
}

configurations {
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

war {
    baseName = archivesBaseName

    // Prevent circular log redirection; use slf4j
    from {configurations.executableWarDeps.collect {
            //it.isDirectory() ? it : project.zipTree(it)
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
            }
        }
    }
    from "$buildDir/classes/main"

     def manifestClasspath = configurations.compile.collect { "/WEB-INF/lib/${it.getName()}" }.join(',')

    manifest {
        attributes 'Implementation-Title': 'Standalone Whelk',
        'Implementation-Version': versionNumber,
        'Main-Class': 'whelk.component.support.JettyServer',
        'Class-Path': manifestClasspath
    }


}

task jettyRun(type: JettyRun, overwrite: true) {
    jettyRun.contextPath = archivesBaseName
    jettyRun.httpPort = 8180
    jettyRun.description = "Starts a jetty instance."

    //reload = "automatic"
    //scanIntervalSeconds = 1

    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
    System.setProperty('whelk.mode', System.getProperty("whelk.mode", "ops"))
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}
