/**
 * Runtime tools. Use these tasks to invoke compiled tools directly from gradle.
 */
import org.gradle.api.plugins.jetty.JettyRun

task whelkOperation(dependsOn: 'classes', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<import|reindex|rebuild> <whelkname> [resource (for import) or sourcestorage (for rebuild)] [since (for import)] [maxNoOfDocs (for import)]' -Dwhelk.config.uri=<config-url> -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  main = 'se.kb.libris.whelks.WhelkOperator'
  def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', mock_cluster)
  systemProperty 'file.encoding', System.getProperty('file.encoding', "")
  systemProperty 'whelk.config.uri', System.getProperty('whelk.config.uri', 'file:src/main/resources/mock_whelks.json')
  args(System.getProperty('args', "").split() as String[])
}

task(groovy, dependsOn: 'classes', type: JavaExec) {
  description "Run a Groovy Script (USAGE: -Dargs='<script> [...]')"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.GroovyMain'
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.conch.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task convertBibMarc2JsonLD(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.MarcBib2JsonLDConverter'
    args(System.getProperty('args', "").split() as String[])
}

task convertMarc2JsonLD(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<uri-path> <source> <dest-dir> <rec-type>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.Marc2JsonLDConverter'
    args(System.getProperty('args', "").split() as String[])
}

task convertJsonLD2Marc(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source> <dest-dir>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.JsonLD2MarcConverter'
    args(System.getProperty('args', "").split() as String[])
}

task war(dependsOn: 'classes', type: War, overwrite: true) {
    doFirst {
        copy {
            from('src/main/resources')
            into('src/main/resources')
            include('logback_prod.xml')
            rename('logback_prod.xml','logback.xml')
        }
    }
}

task jettyRun(dependsOn: 'classes', type: JettyRun, overwrite: true) {
    doFirst {
        copy {
            from('src/main/resources')
            into('src/main/resources')
            include('logback_dev.xml')
            rename('logback_dev.xml','logback.xml')
        }
    }
    //jettyRun.contextPath = '/'
    jettyRun.description = "Starts a jetty instance. (USAGE: -Delastic.host='<host>' -Delastic.cluster='[cluster]')\nTo use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:src/main/resources/whelks.json')"

    def mock_config = "file:src/main/resources/mock_whelks.json"
    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    System.setProperty('file.encoding', System.getProperty('file.encoding', "UTF-8"))
    System.setProperty('whelk.config.uri', System.getProperty("whelk.config.uri", mock_config))

    if (System.getProperty("whelk.config.uri", "") == mock_config) {
        System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
    } else {
        System.setProperty('elastic.host', System.getProperty("elastic.host", ""))
        System.setProperty('elastic.cluster', System.getProperty('elastic.cluster', ""))
    }
}
