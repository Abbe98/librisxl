loadConfiguration()

def loadConfiguration() {
    ext {
        try {
           environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
    }
    System.setProperty('whelk.config.uri', System.getProperty('whelk.config.uri', 'file:etc/environment/' + environment + '/whelks.json'))
    System.setProperty('plugin.config.uri', System.getProperty('plugin.config.uri', 'file:etc/plugins.json'))
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = "UTF-8"
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

allprojects {
    version "0.5.0"


    apply plugin: 'java'
    apply plugin: 'groovy'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    sourceSets {
        main {
            java { srcDirs = [] }
            groovy { srcDir 'src/main/' }
        }
        test {
            groovy { srcDir 'src/test/groovy/' }
        }
    }

    test.testLogging.exceptionFormat "full"

}

subprojects {

    repositories {
        mavenCentral()
        maven { url "http://maven.restlet.org/" }
        flatDir name: 'localDir', dirs: '../lib'
    }

    task copyConfiguration << {
        println "Target environment: ${environment}"

        copy {
            from "../etc/environment/${environment}"
            into "src/main/resources"
            include "**/*"
        }
    }

    processResources.dependsOn copyConfiguration

    /*
    task testWithDevLogging(dependsOn: 'test', type: Copy){
        copy {
            from('../etc')
            include('logback_dev.xml')
            rename('logback_dev.xml','logback.xml')
            into "build/resources/main"
        }
    }
    */

    dependencies {
        groovy 'org.codehaus.groovy:groovy:2.0.4'
        groovy 'commons-cli:commons-cli:1.2'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
        compile 'ch.qos.logback:logback-classic:1.0.0'
        //compile 'org.slf4j:log4j-over-slf4j:1.6.5'
        compile 'commons-io:commons-io:2.3'
        compile 'commons-codec:commons-codec:1.7'
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
        testCompile 'cglib:cglib-nodep:2.2'
    }
}

project(":locgov-pairtree") {
    dependencies {
        testCompile 'junit:junit:4.4'
    }
}

project(":whelk-core") {
    dependencies {
        compile project(":locgov-pairtree")
        compile 'org.elasticsearch:elasticsearch:1.0.0'
        compile 'org.elasticsearch:elasticsearch-lang-groovy:1.5.0'
        compile 'com.spatial4j:spatial4j:0.3'
        compile 'com.basho.riak:riak-client:1.0.6'
        compile 'com.netflix.astyanax:astyanax-cassandra:1.56.43'
        compile 'com.netflix.astyanax:astyanax-thrift:1.56.43'
        compile 'org.apache.httpcomponents:httpclient:4.2.5'
        def sesameVer = "2.7.6"
        compile "org.openrdf.sesame:sesame-model:${sesameVer}"
        compile "org.openrdf.sesame:sesame-repository-api:${sesameVer}"
        compile "org.openrdf.sesame:sesame-repository-event:${sesameVer}"
        compile "org.openrdf.sesame:sesame-repository-sail:${sesameVer}"
        compile "org.openrdf.sesame:sesame-repository-http:${sesameVer}"
        compile "org.openrdf.sesame:sesame-repository-sparql:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-api:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-rdfxml:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-trix:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-turtle:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-n3:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-ntriples:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-rio-trig:${sesameVer}"
        compile "org.openrdf.sesame:sesame-sail-api:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-sail-memory:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-sail-nativerdf:${sesameVer}"
        //compile "org.openrdf.sesame:sesame-sail-inferencer:${sesameVer}"
        compile 'stax:stax:1.2.0'
        compile 'stax:stax-api:1.0.1'
    }
}

project(":ext-libris") {
    dependencies {
        compile project(":whelk-core")
        compile 'org.mozilla:rhino:1.7R4'
        compile 'se.kb.libris:marc:1.2.7'
        compile 'commons-collections:commons-collections:3.2.1'
        compile 'com.damnhandy:handy-uri-templates:1.1.7'
    }
}

project(":ext-swepub") {
    dependencies {
        compile project(":whelk-core")
        compile project(":ext-libris")
    }
}

project(":whelk-webapi") {
    apply plugin: 'jetty'
    apply plugin: 'war'
    dependencies {
        compile project(":whelk-core")
        compile project(":ext-libris")
        compile project(":ext-swepub")
        compile 'org.restlet.jse:org.restlet:2.0.15'
        compile 'org.restlet.jee:org.restlet.ext.servlet:2.0.15'
        compile 'se.kb.libris.commons:isbntools:1.0'
        providedCompile 'javax.servlet:servlet-api:2.5'
    }
}
