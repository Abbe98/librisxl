apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

archivesBaseName = "xlcore"

group = 'com.github.libris'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir 'src/main/' }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "http://jitpack.io/" }
}

dependencies {
    def groovyVersion=GroovySystem.getVersion()

    // KB tools
    compile 'com.github.libris:jmarctools:master-SNAPSHOT'

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.4'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'org.slf4j:log4j-over-slf4j:1.7.6'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    compile 'org.apache.jena:apache-jena-libs:3.0.1'

    // Integration
    compile "org.elasticsearch:elasticsearch:2.2.0"
    compile "org.elasticsearch.plugin:delete-by-query:2.2.0"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    compile 'org.postgresql:postgresql:9.4-1200-jdbc41'
    compile 'org.picocontainer:picocontainer:2.15'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

configurations {
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

task generateVersion(type:Exec) {
    commandLine 'git', 'describe', '--tags'

    standardOutput = new ByteArrayOutputStream()
    doLast {
        String output = standardOutput.toString().trim()
        new File("src/main/resources/version.properties").write("version: ${output}\n")
        println("Updated version.properties to \"${output}\"")
    }
}

//processResources.dependsOn("generateVersion")

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}
task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.marc.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
