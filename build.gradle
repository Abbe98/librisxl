apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

archivesBaseName = "xlcore"

group = 'com.github.libris'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir 'src/main/' }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/coverage_report")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/coverage_report/html"
    }
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "https://jitpack.io/" }
}

dependencies {
    def groovyVersion=GroovySystem.getVersion()
    compile 'org.elasticsearch.client:rest:5.4.1'

    // KB tools
    compile 'com.github.libris:jmarctools:bb97de39cb41e7455ecb29af0ed5f27f2e9cc797'

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.4'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    compile 'org.apache.jena:apache-jena-libs:3.0.1'

    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'

    // Caching
    compile 'org.apache.commons:commons-collections4:4.1'

    // Integration

    compile "org.apache.commons:commons-lang3:3.3.2"
    compile 'com.vividsolutions:jts:1.13'
    compile 'org.postgresql:postgresql:9.4.1212.jre7'
    //compile 'org.postgresql:postgresql:9.4-1200-jdbc41'
    compile 'org.picocontainer:picocontainer:2.15'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.marc.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task vocabFromMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Extract a vocabulary from marcframe"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.marc.MarcFrameVocabExtractor'
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
