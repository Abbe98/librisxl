import org.gradle.api.plugins.jetty.JettyRun

apply plugin: 'application'
apply plugin: 'jetty'
apply plugin: 'war'
loadConfiguration()

def loadConfiguration() {
    ext {
        try {
           environment = env
        } catch (MissingPropertyException mpe) {
            environment = "dev"
        }
        try {
            configuration = conf
        } catch (MissingPropertyException mpe) {
            configuration = "libris"
        }
    }
    def encoding = hasProperty('file.encoding') ? file.encoding : 'UTF-8'
    System.setProperty 'file.encoding', encoding
}

/*
tasks.withType(GroovyCompile) {
    groovyOptions.encoding = "UTF-8"
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}
*/

allprojects {
    version "0.7.0"

    apply plugin: 'java'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        main {
            java { srcDirs = [] }
            groovy { srcDir 'src/main/' }
        }
        test {
            groovy { srcDir 'src/test/groovy/' }
        }
    }

    test.testLogging.exceptionFormat "full"

    repositories {
        mavenCentral()
        maven { url "http://maven.restlet.org/" }
        maven { url "http://repository.codehaus.org/" }
        flatDir name: 'localDir', dirs: 'lib'
    }

}

task copyConfiguration << {
    println "Target environment: ${environment}"
    println "Target configuration: ${configuration}"

    def resources = new File("src/main/resources")
    if( !resources.exists() ) {
        resources.mkdirs()
    }

    copy {
        from "etc/environment/${environment}"
        from "etc/configuration/_all"
        from "etc/configuration/${configuration}"
        into "src/main/resources"
        include "**/*"
    }
}

clean << {
    println "Cleaning out resources."
    delete "src/main/resources/*"
}


processResources.dependsOn copyConfiguration

dependencies {
    compile 'se.kb.libris:marc:1.2.7'
    compile 'org.codehaus.groovy:groovy-all:2.3.6'
    compile 'com.vividsolutions:jts:1.13'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'ch.qos.logback:logback-classic:1.0.0'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile 'com.thetransactioncompany:cors-filter:2.1.2'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    //testCompile 'cglib:cglib-nodep:2.2'
    def camelVersion = "2.14.0"
    def activeMQVersion = "5.10.0"

    compile project(":librisxl-tools/locgov-pairtree")
    compile "org.elasticsearch:elasticsearch:1.3.4"
    compile "com.netflix.astyanax:astyanax-cassandra:1.56.43"
    compile "com.netflix.astyanax:astyanax-thrift:1.56.43"
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile "com.google.guava:guava:16.0.1"
    compile "org.apache.commons:commons-lang3:3.3.2"
    compile "org.apache.camel:camel-core:${camelVersion}"
    compile "org.apache.camel:camel-elasticsearch:2.15-SNAPSHOT"
    compile "org.apache.camel:camel-jackson:${camelVersion}"
    compile "org.apache.camel:camel-http4:${camelVersion}"
    compile "org.apache.camel:camel-groovy:${camelVersion}"
    compile "org.apache.activemq:activemq-camel:${activeMQVersion}"
    compile "org.apache.activemq:activemq-broker:${activeMQVersion}"
    compile "org.apache.jena:jena-core:2.12.0"
    compile "org.apache.jena:jena-fuseki:1.1.0"
    compile "org.apache.jena:jena-tdb:1.1.0"
    // From ext-libris
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.damnhandy:handy-uri-templates:2.0.2'
    compile 'se.kb.libris.commons:isbntools:1.0'
    compile 'mysql:mysql-connector-java:5.1.33'
    providedCompile 'javax.servlet:servlet-api:2.5'
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.main.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'whelk.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
task jettyRun(type: JettyRun, overwrite: true) {
    jettyRun.contextPath = 'whelk-webapi'
    jettyRun.httpPort = 8180
    jettyRun.description = "Starts a jetty instance. (USAGE: -Delastic.host='<host>' -Delastic.cluster='[cluster]')\nTo use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:etc/whelk.json')"

    //reload = "automatic"
    //scanIntervalSeconds = 1

    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
    System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
}

task whelkOperation(dependsOn: 'classes', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<call without for usage instructions>' -Dwhelk.config.uri=<config-url> -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = "."
  main = 'whelk.WhelkOperator'
  minHeapSize = "2g"
  maxHeapSize = "2g"
  def mock_es_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
  def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', mock_es_cluster)
  systemProperty 'cassandra.host', System.getProperty('cassandra.host', "localhost")
  systemProperty 'cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster)
  systemProperty 'file.encoding', "UTF-8"
  //systemProperty 'whelk.config.uri', System.getProperty('whelk.config.uri', null)
  //systemProperty 'plugin.config.uri', System.getProperty('plugin.config.uri', null)
  systemProperty 'disable.plugins', System.getProperty('disable.plugins', 'indexingprawn')
  systemProperty 'picky', System.getProperty('picky', 'false')
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}
