/**
 * Runtime tools. Use these tasks to invoke compiled tools directly from gradle.
 */


task whelkOperation(dependsOn: 'devLogging', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<import|reindex|rebuild> <whelkname> [resource (for import) or sourcestorage (for rebuild)] [since (for import)] [maxNoOfDocs (for import)]' -Dwhelk.config.uri=<config-url> -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = ".."
  main = 'se.kb.libris.whelks.WhelkOperator'
  minHeapSize = "2g"
  maxHeapSize = "2g"
  def mock_es_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
  def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', mock_es_cluster)
  systemProperty 'cassandra.host', System.getProperty('cassandra.host', "localhost")
  systemProperty 'cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster)
  systemProperty 'file.encoding', "UTF-8"
  systemProperty 'whelk.config.uri', System.getProperty('whelk.config.uri', 'file:etc/whelkoperations.json')
  systemProperty 'whelk.disable', System.getProperty('whelk.disable', null)
  args(System.getProperty('args', "").split() as String[])
}

task(groovy, dependsOn: 'classes', type: JavaExec) {
  description "Run a Groovy Script (USAGE: -Dargs='<script> [...]')"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.GroovyMain'
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.conch.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
