import org.gradle.api.plugins.jetty.JettyRun

apply plugin: 'application'
apply plugin: 'jetty'
apply plugin: 'war'

dependencies {
    compile project(":whelk-core")
    compile 'org.mozilla:rhino:1.7R4'
    compile 'se.kb.libris:marc:1.2.7'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'com.damnhandy:handy-uri-templates:1.1.7'
    compile 'se.kb.libris.commons:isbntools:1.0'
    providedCompile 'javax.servlet:servlet-api:2.5'
}

task(convertIso2709ToJson, dependsOn: 'classes', type: JavaExec) {
    description "Convert an ISO2709 file to JSON (USAGE: -Dargs='<infile>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.conch.converter.MarcJSONConverter'
    args(System.getProperty('args', "").split() as String[])
}

task runMarcFrame(dependsOn: 'classes', type: JavaExec) {
    description "Convert a MarcJson file to JsonLD (USAGE: -Dargs='<source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.MarcFrameConverter'
    args(System.getProperty('args', "").split() as String[])
}

task jsonldToTurtle(dependsOn: 'classes', type: JavaExec) {
    description "Convert a JSON-LD file to Turtle (USAGE: -Dargs='<context> <source>')"
    classpath = sourceSets.main.runtimeClasspath
    main = 'se.kb.libris.whelks.plugin.JsonLdToTurtle'
    args(System.getProperty('args', "").split() as String[])
}
task jettyRun(type: JettyRun, overwrite: true) {
    jettyRun.contextPath = 'whelk-webapi'
    jettyRun.httpPort = 8180
    jettyRun.description = "Starts a jetty instance. (USAGE: -Delastic.host='<host>' -Delastic.cluster='[cluster]')\nTo use a specific json-file to configure whelks, use -Dwhelk.config.uri=<URI of json file> (example: -Dwhelk.config.uri='file:etc/whelk.json')"

    def mock_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
    def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
    System.setProperty('cassandra.host', System.getProperty('cassandra.host', "localhost"))
    System.setProperty('cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster))
    System.setProperty('elastic.cluster', System.getProperty("elastic.cluster", mock_cluster))
    System.setProperty('elastic.host', System.getProperty("elastic.host", "localhost"))
}

task whelkOperation(dependsOn: 'classes', type: JavaExec) {
  description "Run import or reindex. (USAGE: -Dargs='<call without for usage instructions>' -Dwhelk.config.uri=<config-url> -Delastic.host='<host>' (-Delastic.cluster='<cluster>') (-Dfile.encoding='<encoding>'))"
  classpath = sourceSets.main.runtimeClasspath
  workingDir = ".."
  main = 'se.kb.libris.whelks.WhelkOperator'
  minHeapSize = "2g"
  maxHeapSize = "2g"
  def mock_es_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-es-cluster"
  def mock_c_cluster = java.net.InetAddress.getLocalHost().getHostName() + "-c-cluster"
  systemProperty 'elastic.host', System.getProperty('elastic.host', "")
  systemProperty 'elastic.cluster', System.getProperty('elastic.cluster', mock_es_cluster)
  systemProperty 'cassandra.host', System.getProperty('cassandra.host', "localhost")
  systemProperty 'cassandra.cluster', System.getProperty('cassandra.cluster', mock_c_cluster)
  systemProperty 'file.encoding', "UTF-8"
  systemProperty 'whelk.config.uri', System.getProperty('whelk.config.uri', null)
  systemProperty 'plugin.config.uri', System.getProperty('plugin.config.uri', null)
  systemProperty 'disable.plugins', System.getProperty('disable.plugins', 'indexingprawn')
  systemProperty 'picky', System.getProperty('picky', 'false')
  args(System.getProperty('args', "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}
