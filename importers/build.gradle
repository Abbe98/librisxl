apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir 'src/main/' }
    }
    test {
        groovy { srcDir 'src/test/groovy/' }
    }
}

mainClassName = "whelk.importer.ImporterMain"

test.testLogging {
    showStandardStreams true
    exceptionFormat "full"
}

repositories {
    mavenCentral()
    maven { url "http://repository.codehaus.org/" }
    maven { url "http://jitpack.io/" }
}

dependencies {
    def activeMQVersion = "5.11.1"
    def groovyVersion= GroovySystem.getVersion()

    // LIBRISXL modules
    compile project(':../harvesters')
    compile('../../whelk-core' in project.subprojects*.name?
            project(':../../whelk-core') :
            'com.github.libris:whelk-core:0.1.3')

    // Common tools
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.12'
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile "com.google.guava:guava:16.0.1"
    compile 'commons-collections:commons-collections:3.2.1'
    compile "org.apache.httpcomponents:httpclient:4.3.1"
    compile "stax:stax:1.2.0"
    compile "stax:stax-api:1.0.1"
    compile 'com.damnhandy:handy-uri-templates:2.0.4'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'org.slf4j:log4j-over-slf4j:1.7.6'
    compile 'org.apache.commons:commons-dbcp2:2.0.1'
    // Integration
    compile 'mysql:mysql-connector-java:5.1.33'
    compile 'org.picocontainer:picocontainer:2.15'

    // profiling and test
    testCompile "org.gperfutils:gprof:0.3.0-groovy-2.3"
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}


// Include dependent libraries in archive.
mainClassName = "whelk.importer.ImporterMain"

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }

    /*
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    */

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : project.zipTree(it).matching {
                exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
            }
        }
    }

}

configurations {
    all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

task(doRun, dependsOn: "classes", type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = "whelk.importer.ImporterMain"
    systemProperties( [
        'xl.secret.properties': System.getProperty("xl.secret.properties"),
        'xl.mysql.properties': System.getProperty("xl.mysql.properties")
    ] )
    minHeapSize = "1g"
    maxHeapSize = "4g"
    args(System.getProperty("args", "").split() as String[])
}

task(groovy, dependsOn: "classes", type: JavaExec) {
    description "Run a Groovy Script (USAGE: -Dargs=\"<script> [...]\")"
    classpath = sourceSets.test.runtimeClasspath
    main = "groovy.ui.GroovyMain"
    args(System.getProperty("args", "").split() as String[])
}

task(console, dependsOn: 'classes', type: JavaExec) {
  description "Launch a Groovy Console"
  classpath = sourceSets.main.runtimeClasspath
  main = 'groovy.ui.Console'
}

